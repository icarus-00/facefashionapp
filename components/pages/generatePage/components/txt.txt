// Components/GenerationImageView.tsx
import React from "react";
import { View, Image, Text } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { Badge, BadgeText, ThirdPartyBadgeIcon } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { generationsWithImage } from "@/services/database/db";

interface GenerationImageViewProps {
  item: generationsWithImage;
  isLoading: boolean;
  height: number;
}

export const GenerationImageView: React.FC<GenerationImageViewProps> = ({ 
  item, 
  isLoading,
  height 
}) => {
  if (isLoading) {
    return (
      <View style={{ width: "100%", height }} className="p-5">
        <Skeleton
          className="w-full h-full rounded-xl bg-gray-200"
          speed={4}
        />
      </View>
    );
  }

  if (item.state === "failed") {
    return (
      <View style={{ width: "100%", height }} className="p-5 items-center justify-center">
        <View className="rounded-xl bg-red-50 w-full h-full items-center justify-center">
          <Ionicons name="warning" size={64} color="#ef4444" />
          <Text className="text-red-500 font-bold text-xl mt-4">Generation Failed</Text>
          <Text className="text-red-400 text-center mt-2 mx-8">There was an error processing your request</Text>
        </View>
      </View>
    );
  }

  if (item.state === "generating") {
    return (
      <View style={{ width: "100%", height }} className="p-5">
        <Skeleton
          className="w-full h-full rounded-xl bg-blue-100"
          speed={4}
        />
        <View className="absolute inset-0 items-center justify-center">
          <Text className="text-blue-700 font-bold">Generating...</Text>
        </View>
      </View>
    );
  }

  return (
    <View style={{ width: "100%", height }} className="p-5">
      <View className="w-full h-full">
        <Image
          className="w-full h-full rounded-xl"
          source={{ uri: item.generationImageUrl }}
          resizeMode="cover"
        />

        <Badge
          className="z-10"
          style={{ position: "absolute", top: 16, right: 16 }}
        >
          <ThirdPartyBadgeIcon
            icon={Ionicons}
            iconProps={{ name: "image" }}
            color="black"
          />
          <BadgeText style={{ fontSize: 12 }}>Image</BadgeText>
        </Badge>
      </View>
    </View>
  );
};

// Components/GenerationVideoView.tsx
import React, { useState, useRef, useEffect } from "react";
import { View, Text, TouchableOpacity, StyleSheet } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { Badge, BadgeText, ThirdPartyBadgeIcon } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { generationsWithImage } from "@/services/database/db";
import { useVideoPlayer, VideoView } from 'expo-video';

interface GenerationVideoViewProps {
  item: generationsWithImage;
  isLoading: boolean;
  height: number;
  onCreateVideo: () => void;
  onRetryVideo: () => void;
}

export const GenerationVideoView: React.FC<GenerationVideoViewProps> = ({
  item,
  isLoading,
  height,
  onCreateVideo,
  onRetryVideo
}) => {
  const [isPlayerVisible, setIsPlayerVisible] = useState(false);

  if (isLoading) {
    return (
      <View style={{ width: "100%", height }} className="p-5">
        <Skeleton
          className="w-full h-full rounded-xl bg-gray-200"
          speed={4}
        />
      </View>
    );
  }

  if (!item.videoUrl || item.videoGeneration === "no-video") {
    return (
      <View style={{ width: "100%", height }} className="p-5 items-center justify-center">
        <View className="rounded-xl bg-gray-50 w-full h-full items-center justify-center">
          <Ionicons name="videocam-outline" size={64} color="#9ca3af" />
          <Text className="text-gray-500 font-medium text-xl mt-4">No Video Available</Text>
          <TouchableOpacity 
            className="mt-6 bg-blue-500 rounded-lg px-6 py-3 flex-row items-center"
            onPress={onCreateVideo}
          >
            <Ionicons name="add-circle-outline" size={24} color="white" />
            <Text className="text-white font-medium ml-2">Generate Video</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  if (item.videoGeneration === "generating") {
    return (
      <View style={{ width: "100%", height }} className="p-5">
        <Skeleton
          className="w-full h-full rounded-xl bg-blue-100"
          speed={4}
        />
        <View className="absolute inset-0 items-center justify-center">
          <Text className="text-blue-700 font-bold">Generating Video...</Text>
        </View>
      </View>
    );
  }

  if (item.videoGeneration === "failed") {
    return (
      <View style={{ width: "100%", height }} className="p-5 items-center justify-center">
        <View className="rounded-xl bg-red-50 w-full h-full items-center justify-center">
          <Ionicons name="warning" size={64} color="#ef4444" />
          <Text className="text-red-500 font-bold text-xl mt-4">Video Generation Failed</Text>
          <Text className="text-red-400 text-center mt-2 mx-8">There was an error processing your video request</Text>
          <TouchableOpacity 
            className="mt-6 bg-blue-500 rounded-lg px-6 py-3 flex-row items-center"
            onPress={onRetryVideo}
          >
            <Ionicons name="refresh" size={24} color="white" />
            <Text className="text-white font-medium ml-2">Try Again</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  return (
    <VideoPlayer
      videoUri={item.videoUrl}
      height={height}
    />
  );
};

// Components/VideoPlayer.tsx
import React, { useState, useEffect, useRef } from "react";
import { View, Text, TouchableOpacity, StyleSheet, Dimensions } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { Badge, BadgeText, ThirdPartyBadgeIcon } from "@/components/ui/badge";
import { useVideoPlayer, VideoView } from 'expo-video';
import { useEvent } from 'expo';

interface VideoPlayerProps {
  videoUri: string;
  height: number;
}

export const VideoPlayer: React.FC<VideoPlayerProps> = ({ videoUri, height }) => {
  const [isControlsVisible, setIsControlsVisible] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);
  
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  const player = useVideoPlayer(videoUri, player => {
    player.loop = true;
  });

  const { isPlaying: playerIsPlaying } = useEvent(player, 'playingChange', { isPlaying: player.playing });
  
  useEvent(player, 'timeUpdate', () => {
    setCurrentTime(player.currentTime);
    setDuration(player.duration);
  });

  useEffect(() => {
    setIsPlaying(playerIsPlaying);
  }, [playerIsPlaying]);

  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  const showControlsTemporarily = () => {
    setIsControlsVisible(true);
    
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    timeoutRef.current = setTimeout(() => {
      setIsControlsVisible(false);
    }, 3000);
  };

  const togglePlay = () => {
    if (isPlaying) {
      player.pause();
    } else {
      player.play();
    }
    showControlsTemporarily();
  };

  const handleSeek = (value: number) => {
    player.seek(value * duration);
    showControlsTemporarily();
  };

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
    showControlsTemporarily();
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
  };
  
  const progressPercentage = duration > 0 ? (currentTime / duration) * 100 : 0;

  return (
    <View style={{ width: "100%", height }} className="p-5">
      <TouchableOpacity
        activeOpacity={1}
        onPress={showControlsTemporarily}
        className="w-full h-full"
      >
        <VideoView 
          style={{ width: "100%", height: "100%", borderRadius: 12 }}
          player={player} 
          allowsFullscreen={true}
          allowsPictureInPicture={true}
        />
        
        <Badge
          className="z-10"
          style={{ position: "absolute", top: 16, right: 16 }}
        >
          <ThirdPartyBadgeIcon
            icon={Ionicons}
            iconProps={{ name: "videocam" }}
            color="black"
          />
          <BadgeText style={{ fontSize: 12 }}>Video</BadgeText>
        </Badge>

        {(!isPlaying && !isControlsVisible) && (
          <TouchableOpacity 
            style={styles.playButton}
            onPress={togglePlay}
          >
            <Ionicons name="play" size={48} color="white" />
          </TouchableOpacity>
        )}

        {isControlsVisible && (
          <View style={styles.controls}>
            <View style={styles.topControls}>
              <Text style={styles.timeText}>{formatTime(currentTime)} / {formatTime(duration)}</Text>
              <TouchableOpacity onPress={toggleFullscreen}>
                <Ionicons name={isFullscreen ? "contract" : "expand"} size={24} color="white" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.centerControls}>
              <TouchableOpacity onPress={togglePlay}>
                <Ionicons name={isPlaying ? "pause" : "play"} size={48} color="white" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.progressContainer}>
              <View style={styles.progressBackground}>
                <View 
                  style={[
                    styles.progressFill, 
                    { width: `${progressPercentage}%` }
                  ]} 
                />
              </View>
              <View style={[styles.progressHandle, { left: `${progressPercentage}%` }]} />
            </View>
          </View>
        )}
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  playButton: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: [{ translateX: -24 }, { translateY: -24 }],
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderRadius: 40,
    width: 80,
    height: 80,
    justifyContent: 'center',
    alignItems: 'center',
  },
  controls: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderBottomLeftRadius: 12,
    borderBottomRightRadius: 12,
    padding: 16,
    height: 140,
    justifyContent: 'space-between',
  },
  topControls: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  centerControls: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
  },
  timeText: {
    color: 'white',
    fontSize: 14,
  },
  progressContainer: {
    width: '100%',
    height: 20,
    position: 'relative',
    justifyContent: 'center',
  },
  progressBackground: {
    height: 4,
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    borderRadius: 2,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#3b82f6',
    borderRadius: 2,
  },
  progressHandle: {
    width: 16,
    height: 16,
    borderRadius: 8,
    backgroundColor: '#3b82f6',
    position: 'absolute',
    top: 2,
    marginLeft: -8,
  },
});

// Components/CreateVideoItem.tsx
import React from "react";
import { View, Text, TouchableOpacity } from "react-native";
import { Ionicons } from "@expo/vector-icons";

interface CreateVideoItemProps {
  onPress: () => void;
  height: number;
}

export const CreateVideoItem: React.FC<CreateVideoItemProps> = ({ onPress, height }) => {
  return (
    <View style={{ width: "100%", height }} className="p-5 items-center justify-center">
      <TouchableOpacity 
        className="bg-gray-100 rounded-xl w-full h-full items-center justify-center"
        onPress={onPress}
      >
        <View className="items-center">
          <Ionicons name="add-circle" size={80} color="#3b82f6" />
          <Text className="text-blue-500 font-bold text-xl mt-4">Create Video</Text>
          <Text className="text-gray-500 text-center mt-2 mx-8">Transform your image into motion</Text>
        </View>
      </TouchableOpacity>
    </View>
  );
};

// Components/TabButtons.tsx
import React from "react";
import { View, Text } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { Button } from "@/components/ui/button";

interface TabButtonsProps {
  currentIndex: number;
  onImagePress: () => void;
  onVideoPress: () => void;
  videoType: "video" | "create-video";
}

export const TabButtons: React.FC<TabButtonsProps> = ({
  currentIndex,
  onImagePress,
  onVideoPress,
  videoType
}) => {
  return (
    <View className="absolute bottom-6 left-0 right-0 flex-row justify-center space-x-4">
      <Button 
        variant={currentIndex === 0 ? "default" : "outline"}
        onPress={onImagePress}
        className={currentIndex === 0 ? "bg-blue-500" : "bg-white"}
      >
        <Ionicons 
          name={currentIndex === 0 ? "image" : "image-outline"} 
          size={20} 
          color={currentIndex === 0 ? "white" : "#3b82f6"} 
          style={{ marginRight: 8 }}
        />
        <Text className={currentIndex === 0 ? "text-white font-medium" : "text-blue-500 font-medium"}>
          Image
        </Text>
      </Button>

      <Button 
        variant={currentIndex === 1 ? "default" : "outline"}
        onPress={onVideoPress}
        className={currentIndex === 1 ? "bg-blue-500" : "bg-white"}
      >
        <Ionicons 
          name={currentIndex === 1 ? 
            (videoType === "video" ? "videocam" : "add-circle") : 
            (videoType === "video" ? "videocam-outline" : "add-circle-outline")} 
          size={20} 
          color={currentIndex === 1 ? "white" : "#3b82f6"} 
          style={{ marginRight: 8 }}
        />
        <Text className={currentIndex === 1 ? "text-white font-medium" : "text-blue-500 font-medium"}>
          {videoType === "video" ? "Video" : "Create Video"}
        </Text>
      </Button>
    </View>
  );
};

// Main Component: GetGeneration.tsx
import React, { useEffect, useState, useRef } from "react";
import { View, Dimensions, RefreshControl } from "react-native";
import SafeAreaView from "@/components/atoms/safeview/safeview";
import { FlashList } from "@shopify/flash-list";
import databaseService, { generationsWithImage } from "@/services/database/db";
import { Skeleton } from "@/components/ui/skeleton";

import { GenerationImageView } from "@/components/GenerationImageView";
import { GenerationVideoView } from "@/components/GenerationVideoView";
import { CreateVideoItem } from "@/components/CreateVideoItem";
import { TabButtons } from "@/components/TabButtons";

const { height: screenHeight } = Dimensions.get("window");
const ItemHeight = screenHeight * 0.85;

export default function GetGeneration({ id }: { id: string }) {
  const [generationsData, setGenerationsData] = useState<generationsWithImage | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const flashListRef = useRef<FlashList<any>>(null);

  const fetchData = async () => {
    try {
      setIsLoading(true);
      const data = await databaseService.getGeneration(id);
      setGenerationsData(data);
    } catch (error) {
      console.error("Failed to fetch generation:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const onRefresh = async () => {
    setIsRefreshing(true);
    await fetchData();
    setIsRefreshing(false);
  };

  const handleCreateVideo = () => {
    console.log("Navigate to create video screen with generation ID:", id);
  };

  const handleRetryVideo = () => {
    console.log("Retry video generation for:", id);
    fetchData();
  };

  useEffect(() => {
    fetchData();

    // Poll for updates if generation is in progress
    const intervalId = setInterval(() => {
      if (
        generationsData?.state === "generating" ||
        generationsData?.videoGeneration === "generating"
      ) {
        fetchData();
      }
    }, 5000);

    return () => clearInterval(intervalId);
  }, [id]);

  // Generate data for FlashList
  const getListData = () => {
    if (!generationsData) return [];

    const items = [];
    
    // Image item
    items.push({
      id: "image",
      type: "image",
      data: generationsData
    });

    // Video or create video item
    if (generationsData.has_Motion || generationsData.videoGeneration !== "no-video") {
      items.push({
        id: "video",
        type: "video",
        data: generationsData
      });
    } else {
      items.push({
        id: "create-video",
        type: "create-video"
      });
    }

    return items;
  };

  const getVideoType = () => {
    if (!generationsData) return "create-video";
    if (generationsData.has_Motion || generationsData.videoGeneration !== "no-video") {
      return "video";
    }
    return "create-video";
  };

  const renderItem = ({ item }: { item: any }) => {
    switch (item.type) {
      case "image":
        return (
          <GenerationImageView 
            item={item.data} 
            isLoading={isLoading} 
            height={ItemHeight} 
          />
        );
      case "video":
        return (
          <GenerationVideoView 
            item={item.data} 
            isLoading={isLoading}
            height={ItemHeight}
            onCreateVideo={handleCreateVideo}
            onRetryVideo={handleRetryVideo}
          />
        );
      case "create-video":
        return (
          <CreateVideoItem 
            onPress={handleCreateVideo}
            height={ItemHeight}
          />
        );
      default:
        return null;
    }
  };

  const navigateToImage = () => {
    flashListRef.current?.scrollToIndex({ index: 0, animated: true });
  };

  const navigateToVideo = () => {
    if (getListData().length > 1) {
      flashListRef.current?.scrollToIndex({ index: 1, animated: true });
    }
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: "white" }} className="relative">
      {isLoading && !generationsData ? (
        <View className="flex-1 p-5">
          <Skeleton
            className="w-full h-full rounded-xl bg-gray-200"
            speed={4}
          />
        </View>
      ) : (
        <>
          <FlashList
            ref={flashListRef}
            data={getListData()}
            renderItem={renderItem}
            estimatedItemSize={ItemHeight}
            showsVerticalScrollIndicator={false}
            pagingEnabled
            vertical
            onViewableItemsChanged={({ viewableItems }) => {
              if (viewableItems.length > 0) {
                setCurrentIndex(viewableItems[0].index);
              }
            }}
            refreshControl={
              <RefreshControl refreshing={isRefreshing} onRefresh={onRefresh} />
            }
          />

          <TabButtons
            currentIndex={currentIndex}
            onImagePress={navigateToImage}
            onVideoPress={navigateToVideo}
            videoType={getVideoType()}
          />
        </>
      )}
    </SafeAreaView>
  );
}